openapi: 3.0.1
info:
  title: Extractor API
  description: |
    # Overview

    Extractor API extracts clean text from articles, as well as details like title, author, images, and more.

    “Clean” text refers to text without boilerplate - advertising copy, subscription solicitations (“Subscribe to our newsletter!”), comments in the comment section, and so on. In other words, the article part of an article page.

    The API is specifically designed for long-form content, rather than short-form content like product descriptions, image captions, etc.

    ### Authentication

    To authenticate your request, simply include the `apikey` parameter with your account's API key in your GET request.

    If you don’t have an API key, you can head over to the [Pricing](/extractor-api-pricing/) page to sign up for a free account or start a 14-day trial for a paid account. Afterwards you’ll be redirected to your [Dashboard](/extractor-api-dashboard/), which will display your API key.

    ### Rate Limits

    Depending on your plan, you’ll have a different rate limit. If you go over your limit, you'll receive a **403 response code**.

    * Free Plan: 1/second
    * Hobby Plan: 5/second
    * Professional Plan: 10/second
    * Business Plan: 15/second
  version: 0.1.9
  x-logo:
    url: https://extractorapi-static.s3.amazonaws.com/extractor_api_logo.png
servers:
  - url: https://extractorapi.com/api
    description: Extractor API base URL
paths:
  /extractor:
    get:
      summary: Extractor
      description: Given a target URL, returns extracted text and other details.
      parameters:
        - name: apikey
          in: query
          description: Your account's API key.
          required: true
          schema:
            type: string
            example: 90c972dba7fz32c3degp478bd328764ab200123
        - name: url
          in: query
          description: The target URL you want to extract text from.
          required: true
          schema:
            type: string
            example: example.com
        - name: fields
          in: query
          description: |
            An optional string of comma-seperated fields you want to display in the response. The **fields** parameter will always return the url, status and text, so there's no need to include them. For raw text, include `raw_text`. Similarly, for the HTML output, include `html`. Both `raw_text` and `html` are optional and not included in standard responses.
          required: false
          schema:
            type: string
            example: author,html # Response will display url, status, text, author and html
      responses:
        200:
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  status:
                    type: string
                  domain:
                    type: string
                  title:
                    type: string
                  author:
                    type: array
                    items:
                      type: string
                  videos:
                    type: array
                    items:
                      type: string
                  date_published:
                    type: string
                  text:
                    type: string
                example:
                    url: http://example.com
                    status: COMPLETE
                    domain: example.com
                    title: Example Article Title
                    images: [
                      example.com/image_1.png,
                      example.com/image_2.png
                    ]
                    videos: [
                      "https://www.youtube.com/watch?v=3XAMPL3",
                      "https://vimeo.com/42424242"
                    ]                    
                    date_published: 2030-01-01T08:40:51.620Z
                    text: Clean article text.
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  status:
                    type: string
                  details:
                    type: string
                example:
                    url: http://example.com
                    status: ERROR
                    details: There was an error connecting to the URL